{
  "swagger": "2.0",
  "info": {
    "title": "test-project",
    "description": "An API Builder service",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "security": [
    {
      "basicAuth": []
    }
  ],
  "paths": {
    "/greet": {
      "get": {
        "responses": {
          "200": {
            "description": "greeting",
            "schema": {
              "$ref": "#/definitions/schema.test-project_greeting"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/schema.test-project_error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          }
        },
        "summary": "Greet a user",
        "operationId": "Greet",
        "parameters": [
          {
            "description": "The username",
            "in": "query",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "helloworld"
        ]
      }
    },
    "/testapi/{id}": {
      "get": {
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResponseModel"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "enum": [
                        "testuser"
                      ]
                    },
                    "testuser": {
                      "$ref": "#/definitions/testuser-full"
                    }
                  }
                }
              ]
            }
          }
        },
        "description": "this is an api that shows how to implement an API",
        "operationId": "findTestapiByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the test user id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testapi"
        ]
      }
    },
    "/testuser": {
      "get": {
        "responses": {
          "200": {
            "description": "The find all succeeded, and the results are available.",
            "schema": {
              "type": "object",
              "required": [
                "success",
                "request-id",
                "key"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "success": {
                  "type": "boolean"
                },
                "request-id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "key": {
                  "type": "string",
                  "enum": [
                    "testusers"
                  ]
                },
                "testusers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/testuser-full"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Find all testusers",
        "operationId": "findTestuser",
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "The create succeeded.",
            "headers": {
              "Location": {
                "description": "The URL to the newly created instance.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Create a testuser",
        "operationId": "createTestuser",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "Create",
            "in": "body",
            "description": "Create body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "first_name field"
                },
                "last_name": {
                  "type": "string",
                  "description": "last_name field"
                },
                "email": {
                  "type": "string",
                  "description": "email field"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The delete succeeded."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Deletes all testusers",
        "operationId": "deleteTestuser",
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    },
    "/testuser/count": {
      "get": {
        "responses": {
          "200": {
            "description": "The count succeeded, and the results are available.",
            "schema": {
              "type": "object",
              "required": [
                "success",
                "request-id",
                "key"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "success": {
                  "type": "boolean"
                },
                "request-id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "key": {
                  "type": "string",
                  "enum": [
                    "testuser"
                  ]
                },
                "testuser": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Count testusers",
        "operationId": "findTestuserCount",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    },
    "/testuser/findAndModify": {
      "put": {
        "responses": {
          "204": {
            "description": "The find and modify succeeded."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Modifies a single testuser. Although the query may match multiple testusers, only the first one will be modified.",
        "operationId": "updateTestuserFindAndModify",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "type": "number"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of records to skip. The value must not be less than 0.",
            "type": "number"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "sel",
            "in": "query",
            "description": "Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "unsel",
            "in": "query",
            "description": "Selects which fields to not return from the query. Others are included. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "Find and Modify",
            "in": "body",
            "description": "Find and Modify body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "first_name field"
                },
                "last_name": {
                  "type": "string",
                  "description": "last_name field"
                },
                "email": {
                  "type": "string",
                  "description": "email field"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    },
    "/testuser/query": {
      "get": {
        "responses": {
          "200": {
            "description": "The query succeeded, and the results are available.",
            "schema": {
              "type": "object",
              "required": [
                "success",
                "request-id",
                "key"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "success": {
                  "type": "boolean"
                },
                "request-id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "key": {
                  "type": "string",
                  "enum": [
                    "testusers"
                  ]
                },
                "testusers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/testuser-full"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Query testusers",
        "operationId": "findTestuserQuery",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "type": "number"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of records to skip. The value must not be less than 0.",
            "type": "number"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "sel",
            "in": "query",
            "description": "Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "unsel",
            "in": "query",
            "description": "Selects which fields to not return from the query. Others are included. The value should be encoded JSON.",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    },
    "/testuser/upsert": {
      "post": {
        "responses": {
          "201": {
            "description": "The upsert succeeded, and resulted in an insert.",
            "headers": {
              "Location": {
                "description": "The URL to the newly created instance.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "The upsert succeeded, and resulted in an update."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Create or update a testuser",
        "operationId": "createTestuserUpsert",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "Upsert",
            "in": "body",
            "description": "Upsert body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "first_name field"
                },
                "last_name": {
                  "type": "string",
                  "description": "last_name field"
                },
                "email": {
                  "type": "string",
                  "description": "email field"
                },
                "id": {
                  "type": "string",
                  "description": "The testuser ID"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    },
    "/testuser/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "The find succeeded, and the results are available.",
            "schema": {
              "type": "object",
              "required": [
                "success",
                "request-id",
                "key"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "success": {
                  "type": "boolean"
                },
                "request-id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "key": {
                  "type": "string",
                  "enum": [
                    "testuser"
                  ]
                },
                "testuser": {
                  "$ref": "#/definitions/testuser-full"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Find one testuser by ID",
        "operationId": "findTestuserByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The testuser ID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      },
      "put": {
        "responses": {
          "204": {
            "description": "The update succeeded."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Update a specific testuser",
        "operationId": "updateTestuserByID",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The testuser ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "Update",
            "in": "body",
            "description": "Update body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "first_name field"
                },
                "last_name": {
                  "type": "string",
                  "description": "last_name field"
                },
                "email": {
                  "type": "string",
                  "description": "email field"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The delete succeeded."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Delete a specific testuser",
        "operationId": "deleteTestuserByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The testuser ID",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    },
    "/testuser/distinct/{field}": {
      "get": {
        "responses": {
          "200": {
            "description": "Distinct fields response.",
            "schema": {
              "type": "object",
              "required": [
                "success",
                "request-id",
                "key"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "success": {
                  "type": "boolean"
                },
                "request-id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "key": {
                  "type": "string",
                  "enum": [
                    "testusers"
                  ]
                },
                "testusers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "No results were found.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "413": {
            "description": "Payload too large",
            "schema": {
              "$ref": "#/definitions/PayloadTooLargeError"
            }
          },
          "500": {
            "description": "Something went wrong during the request; check out the logs on your server.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "504": {
            "description": "The request took too long to process, and the server timed it out.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "default": {
            "description": "Response from server",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          }
        },
        "description": "Find distinct testusers",
        "operationId": "findTestuserDistinctByFIELD",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
            "type": "number"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of records to skip. The value must not be less than 0.",
            "type": "number"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Constrains values for fields. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
            "type": "string"
          },
          {
            "name": "field",
            "in": "path",
            "description": "The field name that must be distinct.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/yaml",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "testuser"
        ]
      }
    }
  },
  "definitions": {
    "ResponseModel": {
      "type": "object",
      "required": [
        "success",
        "request-id"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "success": {
          "type": "boolean"
        },
        "request-id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "required": [
        "message",
        "code",
        "success",
        "request-id"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "success": {
          "type": "boolean",
          "default": false
        },
        "request-id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "UnauthorizedError": {
      "type": "object",
      "required": [
        "message",
        "success",
        "id"
      ],
      "properties": {
        "success": {
          "type": "boolean"
        },
        "id": {
          "enum": [
            "com.appcelerator.api.unauthorized"
          ]
        },
        "message": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PayloadTooLargeError": {
      "type": "object",
      "required": [
        "message",
        "code",
        "success",
        "request-id"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "success": {
          "type": "boolean"
        },
        "request-id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "schema.test-project_greeting": {
      "type": "string",
      "description": "A greeting message for the user"
    },
    "schema.test-project_error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "The error message"
        }
      },
      "required": [
        "error"
      ]
    },
    "testuser-full": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "Require authorized access to API"
    }
  },
  "schemes": [
    "http"
  ]
}